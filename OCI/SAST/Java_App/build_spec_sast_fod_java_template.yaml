version: 0.1
component: build
timeoutInSeconds: 6000
runAs: root
shell: bash
env:
  # these are local variables to the build config
  variables:
    key: "value"
  # the value of a vaultVariable is the secret-id (in OCI ID format) stored in the OCI Vault service
  # you can then access the value of that secret in your build_spec.yaml commands
  vaultVariables:
    FOD_TENANT: ocid1.vaultsecret.oc1.ap-mumbai-1.amaaaaaaxzphy7aapqlqd7fzz7x6prb3jn57zfunzyoqo5h3nithn2jacxra          # TENANT ID
    FOD_USER: ocid1.vaultsecret.oc1.ap-mumbai-1.amaaaaaaxzphy7aaic4dkkt63hu7yokbyoxswuvr2rvl2wjzajauosavbzdq			# FOD USER KEY
    FOD_PWD: ocid1.vaultsecret.oc1.ap-mumbai-1.amaaaaaaxzphy7aaw3pkuimsdy3zxggdkpayxlx5krt3zdcie5th7v3e3rjq			    # FOD PAT
    FOD_RELEASE_ID: ocid1.vaultsecret.oc1.ap-mumbai-1.amaaaaaaxzphy7aauouolbp2c3jmqawgttdqa3h3q4n344csuzczlny2lrfa	    # FOD APPLICATION BASED RELEASE ID  

  # exportedVariables are made available to use as parameters in sucessor Build Pipeline stages
  # For this Build to run, the Build Pipeline needs to have a BUILDRUN_HASH parameter set
  exportedVariables:
    - BUILDRUN_HASH


steps:
  - type: Command
    name: "Export variables"
    timeoutInSeconds: 40
    command: |
      export BUILDRUN_HASH=`echo ${OCI_BUILD_RUN_ID} | rev | cut -c 1-7`
      echo "BUILDRUN_HASH: " $BUILDRUN_HASH
    onFailure:
      - type: Command
        timeoutInSeconds: 40
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 400
        runAs: root

  - type: Command
    timeoutInSeconds: 600
    name: "Install Prereqs"
    command: |
      yum install -y java-11-openjdk-devel
      alternatives --set java /usr/lib/jvm/java-11-openjdk-11.0.16.0.8-1.0.1.el7_9.x86_64/bin/java
      java -version
      
      # install Maven
      yum install maven
      
    onFailure:
      - type: Command
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 40
        runAs: root

  - type: Command
    timeoutInSeconds: 600
    name: "Setting up Fortify"
    command: |

        sha256_FTI='2156a4926b33f5130a8101b9a809ee189cc3e51e698e1ce7516ce31f3bb09da0'
        fortify_tool_installer='https://raw.githubusercontent.com/fortify/FortifyToolsInstaller/main/FortifyToolsInstaller.sh'  # BASE UTILITY DO NOT CHANGE

        #Parameters to configure installable
        fti_install='FortifyToolsInstaller.sh'

        #Download required files, please ensure the URL is available
        wget "$fortify_tool_installer" 
        e=$?        # return code last command
        if [ "${e}" -ne "0" ]; then
            echo "ERROR: Can;t downloads the requierd files from server, can not continue - exit code ${e}"
            exit 100
        fi
        # End of Download
        #persmission to execute
        chmod +x "$fti_install"
        sha256sum -c <(echo "$sha256_FTI $fti_install")
        e=$?        # return code last command
        if [ "${e}" -ne "0" ]; then
            echo "ERROR: Hashes could not be matched, can not continue - exit code ${e}"
            exit 100
        fi
        
        #Execute the shell script to download and install SC
        FTI_TOOLS=sc:latest source $fti_install
        e=$?        # return code last command
        if [ "${e}" -ne "0" ]; then
            echo "ERROR: Can;t downloads the requierd files from server, can not continue - exit code ${e}"
            exit 100
        fi

        #Execute the shell script to download and install FoDUploader
        FTI_TOOLS=fu:v5.3.1 source $fti_install
        e=$?        # return code last command
        if [ "${e}" -ne "0" ]; then
            echo "ERROR: Can;t downloads the requierd files from server, can not continue - exit code ${e}"
            exit 100
        fi
      
    onFailure:
      - type: Command
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 40
        runAs: root

  - type: Command
    timeoutInSeconds: 600
    name: "Vulnerability Assessment"
    command: |

        fod_url='<<FOD BASE URL>>' 									        # Fortify On Demand URL 
        fod_api_url='https://api.'`echo "$fod_url" | awk -F/ '{print $3}'`	# Fortify On Demand API URL    
        fortify_tools_dir='/root/.fortify/tools/FoDUploader/v5.3.1'			# Default installation directory
        fod_util='FoDUpload.jar'											# FoD Utility alias set into FTI Script [[DO NOT CHANGE]]        
        
        echo 'start Packaging'
        #Generate Java Package to upload in FoD
        scancentral package -o sourcecode.zip --build-tool mvn

        echo 'start submitting scan'
        java -jar $fortify_tools_dir/$fod_util -ac ${FOD_USER} ${FOD_PWD} -rid ${FOD_RELEASE_ID} -purl $fod_url -aurl $fod_api_url -tc ${FOD_TENANT} -z sourcecode.zip -ep 2 -rp 2 -pp 2 
        e=$?        # return code last command
        if [ "${e}" -ne "0" ]; then
            echo "ERROR: Fortify On Demand throws error, can not continue - exit code ${e}"
            exit 100
        fi

        echo "INFO: Scan Submitted Successfully..."
        

    onFailure:
      - type: Command
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 40
        runAs: root